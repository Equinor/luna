#!/usr/bin/env python

# Copyright (C) 2018  Statoil ASA, Norway.
#
# Moclipse is part of Ert, Ensemble Reservoir Tools.
#
# Ert is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# Moclipse is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.
#
# See the GNU General Public License at <http://www.gnu.org/licenses/gpl.html>
# for more details.

from __future__ import (division, print_function)

import os.path


from summary import generate_summary
from parser import parse
from luna_util import log


def _mock(state, step_idx, key):
    """Takes a schedule and a step_idx and returns FOPR/FOPT for that step"""
    now = state.schedule.timesteps[step_idx]
    try:
        nxt = state.schedule.timesteps[step_idx + 1]
    except IndexError:
        nxt = state. schedule.end
    days = (nxt - now).days
    wls = [w for w in state.schedule.wells if w.status(step_idx) == u'OPEN']
    pros = [w for w in wls if w.isproducer(step_idx)]
    injs = [w for w in wls if w.isinjector(step_idx)]

    mockedval = len(pros)**2 * len(injs) * days  # yup

    log(state, 'idx {} pros {} injs {} -> {}'.format(step_idx,
                                                     pros,
                                                     injs,
                                                     mockedval))

    return mockedval


def _extract_var_list(keys, smry):
    var_list = []
    for key in keys:
        wgname = None
        num = -1
        var_type = EclSum.var_type(key)
        if var_type in (EclSumVarType.ECL_SMSPEC_WELL_VAR,
                        EclSumVarType.ECL_SMSPEC_GROUP_VAR):
            try:
                tmp = key.split(':')
                kw = tmp[0]
                wgname = tmp[1]
            except IndexError as err:
                raise ValueError('Broken key {}: {}'.format(key, err))
        elif var_type == EclSumVarType.ECL_SMSPEC_FIELD_VAR:
            kw = key
        else:
            raise ValueError(
                'Only field, well and group variables are allowed, not {}'.format(key))
        var_list.append(smry.addVariable(kw, wgname=wgname, num=num))
    return var_list




def main(eclbase):
    state = parse(eclbase)

    smry = generate_summary(state)
    smry.fwrite()
    print('Simulation complete.  Wrote {}.'.format(', '.join(smry.keys())))


if __name__ == '__main__':
    from sys import argv
    if len(argv) != 2:
        exit('Usage: moclipse ECL')

    eclbase = argv[1]
    if not os.path.exists(eclbase + '.DATA'):
        exit('No such file {} (.DATA)'.format(eclbase))

    main(eclbase=eclbase, )
